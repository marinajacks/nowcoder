# -*- coding: utf-8 -*-
"""
Created on Sat Oct 19 17:33:58 2019

@author: 陈彪，版权所有
有这么一个问题，主要的目的是为了拼接断了的两个小的链子，求最短的拼接长度。
输入：一个数组a，例如[4,3,2,6],现在对这个数组进行拼接，首先拼接最短的两
个2,3,然后可以得到接下来长度的三条项链，长度为4,5,6,再对较短的两个进行
拼接，得到的为4+5=9，然后是长度为6,9的两个子项链，这样最后再拼接剩下的，
6+9=15，所以最终拼接的长度为：三次拼接的长度之和，5+9+15=29.从而最短的
拼接长度为29.
"""
'''
解题思路：这个问题的求解可以这样来，给定一个数组，首先排序，计算前两个数的
和，然后将这两个数的和添加到数组中的最后一位，将新数组的前两个数删掉，再排序，
重复上面的过程，知道数组中还剩一个元素。然后把每次计算的前两个数的和加起来
即可。
注意：假如我们使用python的list的数据结构，那么这里关键的一点就是，删除的
时候，连续两次删除的都应该是list的第一个数，因为在删除了数组的第一个数之后，
原数组的一个数又变成了新数组的第一个数。
'''

def splice(a):
    sums=0
    a=sorted(a)
    while len(a)>1:
        b=a[0]+a[1]
        sums=sums+b
        a.append(b)
        del a[0]
        del a[0]
        a=sorted(a)
    return sums
        
if __name__=='__main__':
    a=[4,3,2,6]
    print(splice(a))
    
    
    
    